#!/usr/bin/env -S bash -i

STASH=${STASH-~/.secrets}
RZ='\e[0m'
GR=${GR-'\e[92m'}
RD=${RD-'\e[91m'}
HL=${HL-'\e[1m'}

function die { EN=$1; [[ $EN != "10" ]] && ST="Error:"; shift; echo -e "$ST${RD}$@${RZ}"; exit "$EN"; }
function clean { unset CAGE; unset CAGE_C; unset STASH; unset RD; unset GR; unset HL; }
# don't kill me pliz
function usage { curl https://raw.githubusercontent.com/jul/secrets/main/README.md | ${PAGER-less} ; die 0 "AIDE"; }

mkdir "$STASH" &> /dev/null
chmod 700 "$STASH"
if [ ! -z "$1" ]; then
    if [ -f "$1" ]; then
        FILE="$1";
    elif [ -f "$STASH/$1" ]; then
        FILE="$STASH/$1";
    else
         die 1 "no secret found for $1 check ls $STASH"
    fi
else
    echo -e "${HL}Secrets  menu"
    echo         "-------------"
    echo
    i=1;
    echo -e "${GR}${HL}  0: aide (fetched with curl)${RZ}"
# find something saner than GNU ls here, maybe find or glob
# but I like that new files don't change the menu order ...
# it helps keeps the memory of numbers constant
# yes, I know zsh has glob with sorting.
# THE IFS TRICK !!!!
    IFS=$'\n\t';
    for f in $( ls -rfc -1 ${STASH}/* || echo '' ); do
# you won't be able to see some tricky file names BUT " " and \n are supported
# $ in the filename seems a bad idea probably a way to hide some files :)
# see samples for an example of trick not shown by the menu
        if [ ! -z "$f" ] && [ -f "$f" ]; then
            STATUS=$( [[ $( stat --printf "%a" "$f" )  == "600" ]] \
                || printf "%s" "${RD}pliz chmod 600 \"$f\"" )
            ff="$( basename "$f" )"
            if [ "$ff" != '.' ] && [ "$ff" != '..' ]; then
                printf "%3d: %-32s " $i "$ff"  ;
                echo -e "$STATUS ${RZ}"
                FL[i]=$f
                i=$(( i + 1 ))
            fi
        fi
    done
	unset IFS
    [[ "$i" == "1" ]] && die 3 "maybe you want to set a secret in $STASH ?"
    echo 
    echo "which secret do you want if any?"
    read -r choice
    [[ "$choice" == "0" ]] && usage
    FILE="${FL[$choice]}"
fi
[ -f "$FILE" ] || die 2 "no such secret"
CAGE=${CAGE-$( basename $FILE )}
source "$FILE" || \
    ( [[ $? != "10" ]] &&  die 5 "${FILE} died with status $?" )
if [ ! -z "${HELP-""}" ] || [ ! -z "${DBG-""}" ]; then
    USAGE=${USAGE-"${RD}no usage found${RZ}"};
	MSG="${HL}USAGE $CAGE\\n${RZ}\\n$USAGE\\n";
	[ ! -z "${HELP}" ] && die 10 "$MSG" || echo -e "$MSG";
fi
# if a ressource cleaning function is declared with the name *finally*
# in the secret execute it at exit time
okko() {
	ST="cleanup action detected for ${CAGE}${RZ}.\\nStatus:";
	finally && echo -e "${ST}${GR}OK${RZ}" || echo -e "${ST}${RD}KO${RZ}" ;
}
declare -f finally > /dev/null && trap okko  EXIT
if [ ! -z "$CAGE_C" ]; then
    CAGE_C="${CAGE_C}->${RD}${CAGE}"
else
    CAGE_C="${RD}#SEC:${CAGE}"
fi
export CAGE_C
shift
if [ -z "$1" ]; then
# sane idented use as a "python activate"
    PRMPT="${HL}${CAGE_C}${RZ}:"
    ( PS1="${PRMPT}$PS1" bash --norc -i)
else
# shell escaping hell, try to avoid
    [ -z "$HELP" ] && eval "$@"
fi

